dens14  <- estimate_density(select(df14, all_of(vars)), method = "kernSmooth") |>
mutate(Sample = "Sample 14")
dens15  <- estimate_density(select(df15, all_of(vars)), method = "kernSmooth") |>
mutate(Sample = "Sample 15")
p1_data <- rbind(dens1a, dens1b, dens2, dens3, dens4, dens5, dens6, dens7a, dens7b, dens7c, dens8a, dens8b, dens9, dens10, dens11 , dens12, dens13, dens14, dens15)
linetype <- setNames(rep("solid", length(vars)), vars)
linetype["Affective touch"] <- "dotted"
linetype["Blood sugar"] <- "dashed"
linetype["Sex arousal"] <- "solid"
linetype["Bruise"] <- "dashed"
# proportion of non-1 and non-5 values
p1_data |>
filter(x > 1 & x < 5) |>  # Keep only x values strictly between 1 and 5
summarise(proportion = sum(y) / sum(p1_data$y))  # Normalize by total density
p1 <- p1_data |>
mutate(Sample = fct_relevel(Sample, "Sample 1a", "Sample 1b", "Sample 2", "Sample 3", "Sample 4", "Sample 5", "Sample 6", "Sample 7a", "Sample 7b", "Sample 7c", "Sample 8a", "Sample 8b", "Sample 9", "Sample 10", "Sample 11", "Sample 12", "Sample 13", "Sample 14", "Sample 15"),
Parameter = ifelse(Parameter == "Affective_touch", "Affective touch", Parameter),
Parameter = ifelse(Parameter == "Blood_Sugar", "Blood sugar", Parameter),
Parameter = ifelse(Parameter == "Sex_arousal", "Sex arousal", Parameter)) |>
# mutate(Dashed = ifelse(Parameter %in% c("Affective_touch", "Blood_Sugar", "Bruise"), TRUE, FALSE)) |>
ggplot(aes(x = x, y = y, color = Parameter)) +
geom_line(aes(linetype = Parameter), linewidth = 0.7) +
scale_color_material_d() +
scale_linetype_manual(values = linetype)  +
labs(x = "Response", y = "Distribution", color = "Item", linetype = "Item", title = "Item Distribution") +
guides(color = guide_legend(ncol = 1)) +
facet_wrap(~Sample, scales = "free_y", nrow = 3) +
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(face="bold"))
p1
# Chunk 21
data1a <- normalize(select(df1a, all_of(dens1a$Parameter)), range = c(1, 5))
data1b <- normalize(select(df1b, all_of(dens1b$Parameter)), range = c(1, 5))
data2 <- normalize(select(df2, all_of(dens2$Parameter)), range = c(1, 5))
data3 <- normalize(select(df3, all_of(dens3$Parameter)), range = c(1, 5))
data4 <- normalize(select(df4, all_of(dens4$Parameter)), range = c(1, 5))
data5 <- normalize(select(df5, all_of(dens5$Parameter)), range = c(1, 5))
data6 <- normalize(select(df6, all_of(dens6$Parameter)), range = c(1, 5))
data7a <- normalize(select(df7a, all_of(dens7a$Parameter)), range = c(1, 5))
data7b <- normalize(select(df7b, all_of(dens7b$Parameter)), range = c(1, 5))
data7c <- normalize(select(df7c, all_of(dens7c$Parameter)), range = c(1, 5))
data8a <- normalize(select(df8a, all_of(dens8a$Parameter)), range = c(1, 5))
data8b <- normalize(select(df8b, all_of(dens8b$Parameter)), range = c(1, 5))
data9 <- normalize(select(df9, all_of(dens9$Parameter)), range = c(1, 5))
data10 <- select(df10, all_of(dens10$Parameter))
data11  <- select(df11, all_of(dens11$Parameter))
data12  <- select(df12, all_of(dens12$Parameter))
data13  <- select(df13, all_of(dens13$Parameter))
data14  <- normalize(select(df14, all_of(dens14$Parameter)), range = c(1, 5))
data15   <- na.omit(normalize(select(df15, all_of(dens15$Parameter)), range = c(1, 5))) # remove NAS
row.names(data15) <- NULL
data_all <- rbind(
data1a, data1b, data2, data3, data4, data5, data6, data7a, data7b, data7c,
mutate(data8a, Tickle = NA),
mutate(data8b, Tickle = NA), data9,
mutate(data10, Taste = NA, Cough = NA, Blood_Sugar = NA),
data11,  data12 , data13, data14 , data15
)
# Chunk 22
make_correlation <- function(df) {
correlation::correlation(df, redundant = TRUE) |>
correlation::cor_sort() |>
# correlation::cor_lower() |>
mutate(val = paste0(insight::format_value(r), format_p(p, stars_only = TRUE)),
r = ifelse(Parameter1 == Parameter2, NA, r),
lbl = ifelse(Parameter1 == Parameter2, "", format_value(r, zap_small = TRUE, lead_zero = FALSE)),
lbl = ifelse(p > .05, "", lbl),
Param1 = fct_relevel(str_replace(Parameter1, "_", " "), str_replace(levels(Parameter1), "_", " ")),
Param2 = fct_relevel(str_replace(Parameter2, "_", " "), str_replace(levels(Parameter2), "_", " "))) |>
# mutate(Parameter2 = fct_rev(Parameter2)) |>
ggplot(aes(x = Param1, y = Param2)) +
geom_tile(aes(fill = r), color = "white") +
geom_text(aes(label = lbl), size = 3) +
labs(title = "Correlation Matrix", subtitle = paste0("N = ", nrow(df))) +
scale_fill_gradientn(
colors = c("white", "#FFF9C4", "#FFF59D", "#FFEB3B", "#FFCA28", "#FF9800", "#FF5722", "#F44336", "#E91E63", "#9C27B0", "#673AB7", "#512DA8", "#315  92"),
na.value = "#315  92",
limits = c(0, 0.8),
guide = guide_colorbar(ticks.colour = NA)
) +
# scale_fill_metro_c(limit = c(0, 0.75), guide = guide_colourbar(ticks = FALSE)) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold")
)
}
p2 <- make_correlation(data_all)
make_correlation <- function(df) {
correlation::correlation(df, redundant = TRUE) |>
correlation::cor_sort() |>
# correlation::cor_lower() |>
mutate(val = paste0(insight::format_value(r), format_p(p, stars_only = TRUE)),
r = ifelse(Parameter1 == Parameter2, NA, r),
lbl = ifelse(Parameter1 == Parameter2, "", format_value(r, zap_small = TRUE, lead_zero = FALSE)),
lbl = ifelse(p > .05, "", lbl),
Param1 = fct_relevel(str_replace(Parameter1, "_", " "), str_replace(levels(Parameter1), "_", " ")),
Param2 = fct_relevel(str_replace(Parameter2, "_", " "), str_replace(levels(Parameter2), "_", " "))) |>
# mutate(Parameter2 = fct_rev(Parameter2)) |>
ggplot(aes(x = Param1, y = Param2)) +
geom_tile(aes(fill = r), color = "white") +
geom_text(aes(label = lbl), size = 3) +
labs(title = "Correlation Matrix", subtitle = paste0("N = ", nrow(df))) +
scale_fill_gradientn(
colors = c("white",
"#FFF9C4", "#FFF59D", "#FFEB3B", "#FFCA28", "#FF9800", "#FF5722",
"#F44336", "#E91E63", "#9C27B0", "#673AB7", "#512DA8",
"#3F51B5", "#2196F3", "#03A9F4", "#00BCD4", "#009688", "#31B192"),
na.value = "#31B592",
limits = c(0, 0.8),
guide = guide_colorbar(ticks.colour = NA)
) +
# scale_fill_metro_c(limit = c(0, 0.75), guide = guide_colourbar(ticks = FALSE)) +
theme_minimal() +
theme(
legend.title = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold")
)
}
p2 <- make_correlation(data_all)
p2
fig1 <- p1 / p2
ggsave("figures/Figure1.png", fig1, width=10, height=12, dpi=300, bg="white")
fig1
make_correlation(data1a)
make_correlation(data1b)
make_correlation(data2)
make_correlation(data3)
make_correlation(data5)
make_correlation(data6)
make_correlation(data7a)
make_correlation(data7b)
make_correlation(data7c)
make_correlation(data8a)
make_correlation(data8b)
make_correlation(data9)
make_correlation(data10)
make_correlation(data11)
make_correlation(data12)
make_correlation(data13)
make_correlation(data14)
make_correlation(data15)
uva0 <- EGAnet::UVA(data = data_all, cut.off = 0.3)
uva0
uva0$keep_remove
uva1a <- EGAnet::UVA(data = data1a, cut.off = 0.3)
uva1a
uva1a$keep_remove
uva1b <- EGAnet::UVA(data = data1b, cut.off = 0.3)
uva1b
uva1b$keep_remove
uva2 <- EGAnet::UVA(data = data2, cut.off = 0.3)
uva2
uva2$keep_remove
uva3 <- EGAnet::UVA(data = data3, cut.off = 0.3)
uva3
uva3$keep_remove
uva4 <- EGAnet::UVA(data = data4, cut.off = 0.3)
uva4
uva4$keep_remove
uva5 <- EGAnet::UVA(data = data5, cut.off = 0.3)
uva5
uva5$keep_remove
uva6 <- EGAnet::UVA(data = data6, cut.off = 0.3)
uva6
uva6$keep_remove
uva7a <- EGAnet::UVA(data = data7a, cut.off = 0.3)
uva7a
uva7a$keep_remove
uva7b <- EGAnet::UVA(data = data7b, cut.off = 0.3)
uva7b
uva7b$keep_remove
uva7c <- EGAnet::UVA(data = data7c, cut.off = 0.3)
uva7c
uva7c$keep_remove
uva8a <- EGAnet::UVA(data = data8a, cut.off = 0.3)
uva8a
uva8a$keep_remove
uva8b <- EGAnet::UVA(data = data8b, cut.off = 0.3)
uva8b
uva8b$keep_remove
uva9 <- EGAnet::UVA(data = data9, cut.off = 0.3)
uva9
uva9$keep_remove
uva10 <- EGAnet::UVA(data = data10, cut.off = 0.3)
uva10
uva10$keep_remove
uva11  <- EGAnet::UVA(data = data11 , cut.off = 0.3)
uva11
uva11$keep_remove
uva12  <- EGAnet::UVA(data = data12, cut.off = 0.3)
uva12
uva12$keep_remove
uva13 <- EGAnet::UVA(data = data13, cut.off = 0.3)
uva13
uva13$keep_remove
uva14  <- EGAnet::UVA(data = data14 , cut.off = 0.3)
uva14
uva14$keep_remove
uva15   <- EGAnet::UVA(data = data15  , cut.off = 0.3)
uva15
uva15$keep_remove
rez_uva <- c(uva1a$keep_remove$remove,
uva1b$keep_remove$remove,
uva2$keep_remove$remove,
uva3$keep_remove$remove,
uva4$keep_remove$remove,
uva5$keep_remove$remove,
uva6$keep_remove$remove,
uva7a$keep_remove$remove,
uva7b$keep_remove$remove,
uva7c$keep_remove$remove,
uva8a$keep_remove$remove,
uva8b$keep_remove$remove,
uva9$keep_remove$remove,
uva10$keep_remove$remove,
uva11 $keep_remove$remove,
uva12 $keep_remove$remove,
uva13 $keep_remove$remove,
uva14 $keep_remove$remove,
uva15  $keep_remove$remove)
sort(table(rez_uva), decreasing = TRUE) / length(rez_uva)
data_all <- select(data_all, -Tickle)
data1a <- select(data1a, -Tickle)
data1b <- select(data1b, -Tickle)
data2 <- select(data2, -Tickle)
data3 <- select(data3, -Tickle)
data4 <- select(data4, -Tickle)
data5 <- select(data5, -Tickle)
data6 <- select(data6, -Tickle)
data7a <- select(data7a, -Tickle)
data7b <- select(data7b, -Tickle)
data7c <- select(data7c, -Tickle)
# data8a <- select(data8a, -Tickle)
# data8b <- select(data8b, -Tickle)
data9 <- select(data9, -Tickle)
data10 <- select(data10, -Tickle)
data11  <- select(data11 , -Tickle)
data12  <- select(data12 , -Tickle)
data13  <- select(data13 , -Tickle)
data14  <- select(data14 , -Tickle)
data15   <- select(data15  , -Tickle)
colors <- c("Heart" = "#F44336", "Breathing" = "#FF5722",
"Hungry" = "#FF9800", "Thirsty" = "#FFC107",
"Burp" = "#4CAF50", "Wind" = "#009688",
"Urinate" = "#63824C", "Defecate" = "#795548",
"Cough" = "#8BC34A", "Sneeze" = "#CDDC39",
"Bruise" = "#673AB7", "Blood Sugar" = "#3F51B5",
"Muscles" = "#2196F3", "Pain" = "#00BCD4",
"Sex arousal" = "#FF4081", "Temp" = "#9C27B0",
"Vomit" = "#76FF03", "Taste" = "#00E676",
"Affective touch" = "#FF1744", "Itch" = "#D500F9")
make_hclust <- function(data) {
rez_pvclust <- pvclust::pvclust(data,
method.hclust = "complete",
method.dist = "correlation",
nboot = 1000, quiet=TRUE, parallel=TRUE)
dendrogram <- as.dist(1 - cor(data, use = "pairwise.complete.obs")) |>
hclust(method = "complete") |>
tidygraph::as_tbl_graph()
# Process Nodes
nodes <- as.list(dendrogram)$nodes |>
mutate(
Size = ifelse(label != "", 10, NA),
Item = str_replace(label, "_", " "),
idx = 1:nrow(as.list(dendrogram)$nodes))
# Central node
nodes[nodes$height == max(nodes$height), c("Item", "Size")] <- data.frame(Item="Central", Size=15)
# Process Edges
edges <- as.list(dendrogram)$edges
edges$linewidth = datawizard::rescale(nodes[edges$from, ]$height, to = c(0.1, 1))
p <- tidygraph::tbl_graph(nodes = nodes, edges = edges) |>
ggraph(layout = "dendrogram", circular = TRUE) +
# geom_edge_diagonal(strength = 0.7, linewidth = 1) +
geom_edge_elbow2(aes(edge_width=linewidth), color="#212121") +
geom_node_point(aes(filter=Item %in% c("Central"), size = Size), color="#212121") +
# geom_node_point(aes(filter=Group %in% c("Visceroception", "Awareness", "Deficit"), color=Group, size = Size)) +
geom_node_text(aes(
label = ifelse(Item != "", Item, NA),
x = x * 1.10,
y = y * 1.10,
filter = label != "",
angle = ifelse(
x >= 0,
asin(y) * 360 / 2 / pi,
360 - asin(y) * 360 / 2 / pi
),
hjust = ifelse(
x >= 0, 0, 1
))) +
geom_node_point(aes(filter = label != "", color=Item, size=Size), alpha = 1) +
# geom_node_text(aes(label=idx)) +  # Debug
scale_edge_width_continuous(range=c(1, 3), guide = "none") +
scale_size_continuous(range=c(10, 10), guide = "none") +
scale_color_manual(values = colors,
breaks = names(colors)) +
ggtitle("Hierarchical Clustering Analysis (HCA)", subtitle = "Method = Correlation") +
coord_equal(clip = "off", xlim = c(-1.25, 1.25), ylim = c(-1.25, 1.25)) +
theme_void() +
# guides(color = guide_legend(override.aes = list(size = c(7.5, 5, 5, 3.5, 7.5, 5, 5, 3.5, 3.5, 3.5, 7.5, 5, 5, 3.5)))) +
theme(legend.text = ggtext::element_markdown(),
legend.title = element_blank(),
legend.position = "none",
# plot.title = element_blank(),
# plot.subtitle = element_blank()
plot.title = element_text(face="bold"))
list(pvclust = rez_pvclust, p = p)
}
rez_hclust <- make_hclust(data_all)
plot(rez_hclust$pvclust, hang = -1, cex = 0.5)
pvclust::pvrect(rez_hclust$pvclust, alpha=0.95, max.only=FALSE)
rez_hclust$p
#| message: false
#| warning: false
make_ega <- function(data, cols = c("C1" = "#F44336", "C2" = "#FF9800", "C3" = "#795548", "C4" = "#CDDC39", "C5" = "#2196F3", "C6" = "#009688", "C7" = "#9C27B0")) {
rez <- EGAnet::bootEGA(
data = data,
seed = 123,
model = "glasso",
algorithm = "leiden",
EGA.type = "hierEGA",
type = "resampling",
plot.itemStability = FALSE,
verbose = FALSE,
allow.singleton = TRUE
)
table <- EGAnet::net.loads(rez$EGA$lower_order)$std |>
as.data.frame() |>
rownames_to_column("Item") |>
gt::gt() |>
gt::tab_header(title = "EGA Loadings") |>
gt::data_color(
columns = -Item,
method = "numeric",
colors = scales::col_numeric(
palette = c("red", "white", "green"),
domain = c(-1, 0, 1)
)) |>
gt::fmt_auto()
nodes <- rez$EGA$lower_order$dim.variables |>
rename(name = items) |>
mutate(dimension = paste0("C", dimension),
size = apply(EGAnet::net.loads(rez$EGA$lower_order)$std, 1, max)[name])
loadings <- rez$EGA$lower_order$network |>
as.data.frame() |>
rownames_to_column("to") |>
pivot_longer(-c(to), names_to = "from", values_to = "Loading") |>
filter(Loading > quantile(Loading, 1/3))
g <- tidygraph::tbl_graph(nodes = nodes, edges = loadings, directed = FALSE) |>
mutate(name = str_replace(name, "_", " "),
name = ifelse(name == "Sex arousal", "Sex", name))
set.seed(1)
layout <- ggraph::create_layout(g, layout = "fr", weights = abs(loadings$Loading))
xrange <- max(layout$x) - min(layout$x)
yrange <- max(layout$y) - min(layout$y)
xmin <- min(layout$x) - xrange * 0.05
xmax <- max(layout$x) + xrange * 0.05
ymin <- min(layout$y) - yrange * 0.05
ymax <- max(layout$y) + yrange * 0.05
p <- layout |>
ggraph() +
geom_edge_bend(aes(edge_width = Loading, edge_alpha = Loading), color = "#212121",
strength = 0.3) +
geom_node_point(aes(size = size, color = dimension), alpha = 0.95) +
geom_node_text(aes(label = name), size = 3, color = "white", fontface = "bold") +
scale_size_continuous(range = c(23, 28)) +
scale_edge_width(range = c(0.3, 4)) +
scale_edge_alpha(range = c(0.1, 0.9)) +
scale_color_manual(values = cols) +
labs(title = "Exploratory Graph Analysis (EGA)", subtitle = "Method = Leiden") +
theme_void() +
theme(legend.position = "none",
plot.title = element_text(face="bold")) +
coord_cartesian(xlim =c(xmin, xmax), ylim = c(ymin, ymax))
list(rez = rez, table = table, p = p)
}
rez_ega <- make_ega(data_all, cols = c(
"C1" = colors[["Heart"]], "C2" = colors[["Hungry"]], "C3" = colors[["Defecate"]], "C4" = colors[["Muscles"]],
"C5" = colors[["Cough"]], "C6" = colors[["Wind"]], "C7" = colors[["Bruise"]]))
setwd("C:/Users/asf25/Desktop/studies/MT-RTT/analysis")
library(jsonlite)
library(progress)
# path for the data
path <- "/Users/asf25/Box/MouseTracking/data/"
# JsPsych Experiment ----------------------------
files <- list.files(path, pattern = "*.csv")
files
all_demo <- data.frame()
rawdata <- read.csv(paste0(path, "/", file))
rawdata <- read.csv(paste0(path, "/", file))
files
library(jsonlite)
library(progress)
# path for the data
path <- "/Users/asf25/Box/MouseTracking/data/"
# JsPsych Experiment ----------------------------
files <- list.files(path, pattern = "*.csv")
all_demo <- data.frame()
for (file in files){
# file <- "hyb47wjvbs.csv"
rawdata <- read.csv(paste0(path, "/", file))
message(paste("\nProcessing:", file))
}
dat <- rawdata[rawdata$screen == "browser_info",]
dat
rawdata
rawdata$screen
library(jsonlite)
library(progress)
# path for the data
path <- "/Users/asf25/Box/MouseTracking/data/"
files <- list.files(path, pattern = "*.csv")
files
file <- "2Z96E-07-07--12--14-A.csv"
rawdata <- read.csv(paste0(path, "/", file))
rawdata
rawdata$screen
# Initialise particiapnt-level data in files ending in A
dat <- rawdata[rawdata$screen == "response",]
dat
rawdata$screen
rawdata
rawdata$response
# Initialise particiapnt-level data in files ending in A
dat <- rawdata[rawdata$response, ]
dat
# Demographics
demog <- jsonlite::fromJSON(rawdata[rawdata$trial_type == "survey-html-form", ]$response)
rawdata[rawdata$trial_type == "survey-html-form", ]$response %>%
lapply(fromJSON) %>%
bind_rows()
rawdata[rawdata$trial_type == "survey-html-form", ]$response |>
lapply(fromJSON) |>
bind_rows()
library(tidyverse)
rawdata[rawdata$trial_type == "survey-html-form", ]$response |>
lapply(fromJSON) |>
bind_rows()
rawdata[rawdata$trial_type == "survey-html-form", ]$response
rawdata[rawdata$trial_type == "survey-html-form", ]$response |>
lapply(fromJSON)
demog <- rawdata[rawdata$trial_type == "survey-html-form", ]$response |>
lapply(fromJSON) |> as.data.frame()
demog
rawdata
rawdata$screen == "WelcomeA"
rawdata[rawdata$screen == "WelcomeA", ]
rawdata[rawdata$screen == "Condition", ]
condition <- rawdata[rawdata$screen == "Condition", ]$response
condition
rawdata$screen == "Condition"
rawdata$screen == "condition"
rawdata[rawdata$screen == "condition", ]$response
rawdata[rawdata$screen == "condition", ]
rawdata[rawdata$screen == "condition", ]$condition
rawdata$condition
unique(rawdata$condition)[1]
# Theme
demog$condition <- unique(rawdata$theme)[1]
demog
unique(rawdata$condition)[1]
unique(rawdata$theme)[1]
unique(rawdata$theme)[2]
# Condition
demog$condition <- unique(rawdata$condition)[1]
# Theme
demog$theme <- unique(rawdata$theme)[2]
demog
demog <- rawdata[rawdata$trial_type == "survey-html-form", ]$response |>
lapply(fromJSON) |> as.data.frame()
# Theme
demog$theme <- unique(rawdata$theme)[2]
# Condition
demog$condition_A <- unique(rawdata$condition)[1]
demog
rawdata
demo$jspscyh_id <- unique(rawdata$jspsych_id)[2]
demo
unique(rawdata$jspsych_id)[2]
demog <- rawdata[rawdata$trial_type == "survey-html-form", ]$response |>
lapply(fromJSON) |> as.data.frame()
demo$jspscyh_id <- unique(rawdata$jspsych_id)[2]
rawdata
demog$jspscyh_id <- unique(rawdata$jspsych_id)[2]
demog
lapply(fromJSON) |> as.data.frame()
unique(rawdata$rule1)[2]
unique(rawdata$rule2)[2]
demog <- rawdata[rawdata$trial_type == "survey-html-form", ]$response |>
lapply(fromJSON) |> as.data.frame()
demog$jspscyh_id <- unique(rawdata$jspsych_id)[2]
# Theme
demog$theme <- unique(rawdata$theme)[2]
# Condition
demog$condition_A <- unique(rawdata$condition)[1]
# Rule 1
demog$rule1 <- unique(rawdata$rule1)[2]
# Rule 2
demog$rule2 <- unique(rawdata$rule2)[2]
demog
files
file <- "EERES-28-07--21--15-B.csv"
rawdata <- read.csv(paste0(path, "/", file))
rawdata
